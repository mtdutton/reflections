When would you want to use a remote repository rather than keeping all your work local?

  One key benefit to using a remote repository would be so that you could share the repository with other developers.  Space limitations on a local harddrive could come into play as well.
  
Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

  There are times when you may be working on something that having the latest code at that time could interfere with your work.  Perhaps better to finish what you are doing, then pull the latest to begin reconciling the differences.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

	A clone is a copy of the commits from a remote to a local, which you might use when you first start working on a project. A branch is a split of a commit into two names for it, each which can have commits added to it without effecting the other. A fork is only within github, and it is used to create a copy of someone's github repository within your own.

What is the benefit of having a copy of the last known state of the remote stored locally?

    You could see the changes that have been made while you are offline, make your changes as needed and perform any desired merges, then go back online to fetch more changes, merge, then finally push everything.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

    There are other version control systems out there, but I am not aware if they have such collaborative features like GitHub.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

    You should really leave master branch untouched, except to pull what is in origin when desired.  The separate branches should be for the local changes you wish to make, then you can push that to a new branch in the remote for pull requests.

